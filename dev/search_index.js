var documenterSearchIndex = {"docs":
[{"location":"R_use/#Using-R-language","page":"Using R language","title":"Using R language","text":"","category":"section"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"There are quite a few ways to use CoexistenceHoles in R using JuliaCall. Here are 3 examples that achieve the same result.","category":"page"},{"location":"R_use/#)-evals-and-calls","page":"Using R language","title":"1) evals and calls","text":"","category":"section"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"This is the quick and dirty way of running julia code in R. We do not recommend it as a very effective way to write a project, but it exists.","category":"page"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"A = julia_eval(\"random_communitymatrix(8, 0.1, 0.1)\")\nr = julia_eval(\"random_growthvector(8, 0.1, 0.1)\")\nH  = julia_call(\"assembly_hypergraph_GLV\", A, r)","category":"page"},{"location":"R_use/#)-julia_function()","page":"Using R language","title":"2) julia_function()","text":"","category":"section"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"This is a much cleaner way if you want to integrate a few functions from CoexistenceHoles into your R code.","category":"page"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"# define you functions from julia in R\nrandom_growthvector = julia_function(\"random_growthvector\", pkg_name=\"CoexistenceHoles\")\nrandom_communitymatrix = julia_function(\"random_communitymatrix\", pkg_name=\"CoexistenceHoles\")\nassembly_hypergraph_GLV = julia_function(\"assembly_hypergraph_GLV\", pkg_name=\"CoexistenceHoles\")\n\n# use them directly\nA = random_communitymatrix(8, 0.1, 0.1)\nr = random_growthvector(8, 0.1, 0.1)\nH = assembly_hypergraph_GLV(A, r)","category":"page"},{"location":"R_use/#)-julia*pkg*import()","page":"Using R language","title":"3) juliapkgimport()","text":"","category":"section"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"You also have the choice to import multiple functions at once. This can be usefull if you are using many functions from CoexistenceHoles","category":"page"},{"location":"R_use/","page":"Using R language","title":"Using R language","text":"# import the functions from the package and store them in opt\nopt <- julia_pkg_import(\"CoexistenceHoles\", func_list = c(\"random_communitymatrix\",\n                                                           \"random_growthvector\",\n                                                           \"assembly_hypergraph_GLV\"))\n\n# access the functions through opt variable\nA = opt$random_communitymatrix(8, 0.1, 0.1)\nr = opt$random_growthvector(8, 0.1, 0.1)\nH = opt$assembly_hypergraph_GLV(A,R)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Comming Soon!! For now just see the example on the main page","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"In depth Description","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"(Image: )","category":"page"},{"location":"glossary/#Function-Glossary","page":"Function Glossary","title":"Function Glossary","text":"","category":"section"},{"location":"glossary/","page":"Function Glossary","title":"Function Glossary","text":"Pages=[\"glossary.md\"]","category":"page"},{"location":"glossary/","page":"Function Glossary","title":"Function Glossary","text":"Modules = [CoexistenceHoles]","category":"page"},{"location":"glossary/#CoexistenceHoles.assembly_hypergraph_GLV-Tuple{Array{var\"#s18\",2} where var\"#s18\"<:Real,Array{var\"#s16\",1} where var\"#s16\"<:Real}","page":"Function Glossary","title":"CoexistenceHoles.assembly_hypergraph_GLV","text":"assemblyhypergraphGLV(A,r; <keyword arguments>) Computes the assembly hypergraph for (A,r).\n\nArguments\n\nA::Array{<:Real,2}: community matrix\nr::Array{<:Real, 1}: growth vector\nmethod::String=\"permanence\": will return a randomized growthvector using one of the following methods\n\"permanence\": uses the is_GLVpermantent(@ref) to determine interspecies coexistance\n\"localstability\": uses the is_GLVlocallystable(@ref) to determine interspecies coexistance\nregularization::Real=0:\n\nOutputs\n\nhypergraph::Array{Array{Int64,1},1}: array of hyper edges: species in edge => species coexist\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.betti_hypergraph_ripscomplex-Tuple{Any}","page":"Function Glossary","title":"CoexistenceHoles.betti_hypergraph_ripscomplex","text":"bettihypergraphripscomplex(H; max_dim = 3)\n\nComputes Betti numbers of hypergraph. Based on computing the hypergraph subdivision without expansion, which returns the inclusion graph\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.disassembly_hypergraph-Tuple{Any}","page":"Function Glossary","title":"CoexistenceHoles.disassembly_hypergraph","text":"disassembly_hypergraph(hypergraph)\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.hypergraph_subdivide-Tuple{Any}","page":"Function Glossary","title":"CoexistenceHoles.hypergraph_subdivide","text":"hypergraph_subdivide(H; expansion = false)\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.is_GLVlocallystable-Tuple{Array{var\"#s14\",2} where var\"#s14\"<:Real,Array{var\"#s15\",1} where var\"#s15\"<:Real}","page":"Function Glossary","title":"CoexistenceHoles.is_GLVlocallystable","text":"is_GLVlocallystable(A, r)\n\nComputes if the pair (A,r) has a feasible interior equilibrium that is stable.\n\nArguments\n\nA::Array{Real,2}: community matrix\nr::Array{Real, 1}: growth vector\n\nOutputs\n\nstability::Bool: true = stable, false = not stable\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.is_GLVpermanent-Tuple{Array{var\"#s21\",2} where var\"#s21\"<:Real,Array{var\"#s22\",1} where var\"#s22\"<:Real}","page":"Function Glossary","title":"CoexistenceHoles.is_GLVpermanent","text":"is_GLVpermanent(A, r; <keyword arguments>)\n\nComputes permanence of the pair (A,r) using Jansen's criterion of mutual invasibility. is_permanente(A,r;) -> Boolean\n\nArguments\n\nA::Array{<:Real,2}: community matrix\nr::Array{<:Real, 1}: growth vector\nregularization::Real=0:\nz_tolerance::Real=-1e-60:\niterations::Integer=1e4:\n\nOutputs\n\npermanence::Bool: true = permanent, false = not permanent\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.minimal_simplicial_complex-Tuple{Any}","page":"Function Glossary","title":"CoexistenceHoles.minimal_simplicial_complex","text":"minimalsimplicialcomplex(hypergraph)\n\nComputes the minimal simplicial complex containig the hypergraph H\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.random_communitymatrix-Tuple{Number,Real,Real}","page":"Function Glossary","title":"CoexistenceHoles.random_communitymatrix","text":"random_communitymatrix(N, σ, p)\n\nGenerates a random community matrix (the \"A\" matrix in the generalized Lotka-Voltera equation). entries according to a Bernoulli distribution with success rate parameter, p (the entries that are not \"populated\" are set to 0)\n\nArguments\n\nN::Real: dimension of returned square matrix (N x N)\nσ::Real: standard deviation of normal distribution used to generate each entry (μ = 0)\np::Real: success rate of Bernoulli distribution used to populate the returned matrix\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ncommunity_matrix::Array{<:Real,2}\n\nSee also: randomize_communitymatrix\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.random_growthvector-Tuple{Int64,Real,Real}","page":"Function Glossary","title":"CoexistenceHoles.random_growthvector","text":"random_growthvector(N, μ, σ; seed=nothing)\n\nGenerates a random growth vector (the \"r\" vector in the generalized Lotka-Voltera  equation)\n\nArguments\n\nN::Real: length of returned growth vector\nμ::Real: mean of LogNormal distribution used to generate each value\nσ::Real: standard deviation of LogNormal distribution used to generate each value\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ngrowth_vector::Array{<:Real,1}\n\nSee also: randomize_growthvector\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.randomize_communitymatrix-Tuple{Array{var\"#s14\",2} where var\"#s14\"<:Real}","page":"Function Glossary","title":"CoexistenceHoles.randomize_communitymatrix","text":"randomize_communitymatrix(A; <keyword arguments>)\n\nArguments\n\nr::Array{<:Real,2}: growth vector (this can be generated randomly by random_growthvector)\nmethod::String=\"shuffle\": will return a randomized community matrix using one of the following methods\n\"shuffle\": shuffles all of the entries except for the ones on the diagonals\n\"preserve_sign_shuffle\": same as \"shuffle\" but the signs are not modified\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ncommunity_matrix::Array{<:Real,2}\n\nSee also: random_communitymatrix\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.randomize_growthvector-Tuple{Array{var\"#s19\",1} where var\"#s19\"<:Real}","page":"Function Glossary","title":"CoexistenceHoles.randomize_growthvector","text":"randomize_growthvector(r; <keyword arguments>)\n\nArguments\n\nr::Array{<:Real,1}: growth vector (this can be generated randomly by random_growthvector)\nmethod::String=\"preserve_norm\": will return a randomized growthvector using one of the following methods\n\"preserve_norm\": generated using a normal distribution for each entry, and then scaled to have the same norm as growth vector input (r)\n\"shuffle\": randomly permute growth vector input (r)\n\"sample\": randomly sample (with replacement) entries of growth vector input (r)\n\"preserve_sign_shuffle\": same as \"shuffle\" but the signs are not modified\n\"preserve_sign_sample\": same as \"sample\" but the signs are not modified\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ngrowth_vector::Array{<:Real,1}\n\nSee also: random_growthvector\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.read_hypergraph-Tuple{Any}","page":"Function Glossary","title":"CoexistenceHoles.read_hypergraph","text":"read_hypergraph(filename)\n\n\n\n\n\n","category":"method"},{"location":"glossary/#CoexistenceHoles.save_hypergraph_dat-Tuple{String,Array{Array{Int64,1},1}}","page":"Function Glossary","title":"CoexistenceHoles.save_hypergraph_dat","text":"savehypergraphdat(file, H)\n\nSaves the hypergraph H into file as a list of hyperedges\n\nArguments\n\nfile::String: full file name (including the path where you want to save it)\nH::Array{Array{Int64,1},1}: hypergraph\n\nSee also: assembly_hypergraph_GLV\n\n\n\n\n\n","category":"method"},{"location":"#CoexistenceHoles.jl-Documentation","page":"Home","title":"CoexistenceHoles.jl Documentation","text":"","category":"section"},{"location":"#Quick-Overview","page":"Home","title":"Quick Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CoexistenceHoles is a julia and R package that originally was made for the project \"Coexistence holes characterize the assembly and disassembly of multispecies sytems\". However, the package has the potential for a variety of applications. In short, it provides efficient tools for analyzing the homology of general hypergraphs.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Julia","page":"Home","title":"Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is not registered (yet). You can install it via the Julia REPL like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(PackageSpec(url=\"https://github.com/SyntheticDynamics/CoexistenceHoles.jl.git\", rev=\"master\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or you can install it via the Pkg REPL like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.3) pkg> add https://github.com/SyntheticDynamics/CoexistenceHoles.jl.git#master","category":"page"},{"location":"#R","page":"Home","title":"R","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can also be used with R. With R installed, you'll still need to download install julia, although you won't be using it directly. You can check if julia is installed correctly by running the julia command in a terminal. If this command is not found, you will need to add it to your path following the proper instructions for your operating system.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In R we use JuliaCall as an interface to access the julia code. There are many ways to access the package with R. Here are someuseful ones, or just keep reading to get started right away. For more in-depth function summaries take a look at the official documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The follwoing are steps to install CoexistenceHoles in R. See the examples or tutorials for more specific instructions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"install.packages(\"JuliaCall\")\n\nlibrary(JuliaCall)\njulia <- julia_setup()\n\n# only need to run this once\njulia_install_package(\"https://github.com/SyntheticDynamics/CoexistenceHoles.jl.git#master\")\n\n# add the library every time you open a new session of R and want to use CoexistenceHoles\njulia_library(\"CoexistenceHoles\")","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"#Julia-2","page":"Home","title":"Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CoexistenceHoles\n\nN = 8 # number of species in our ecosystem\n\n# create a random community matrix\nσA = 0.1 # standard devation for entries\nC = 0.1 # success rate of Bernoulli distribution used to populate matrix\nA = random_communitymatrix(N, σA, C)\n\n# create a random growth vector\nμ = 0.3 # mean of LogNormal distribution used to generate each value\nσr = 0.2 # standard deviation of LogNormal distribution used to generate each value\nr = random_growthvector(N, μ, σr)\n\n\nreg = 0\nmax_dim  = 4\nH = assembly_hypergraph_GLV(A, r; method = \"localstability\", regularization = reg)\nR = disassembly_hypergraph(H)\n\n# maybe save these for later if you want\nsave_hypergraph_dat(\"~/hypergraphs/assembly_hypergraph.dat\", H)\nsave_hypergraph_dat(\"~/hypergraphs/disassembly_hypergraph.dat\", R)\n\n# get the betti numbers\nbetti_H = betti_hypergraph_ripscomplex(H; max_dim = max_dim)","category":"page"},{"location":"#R-2","page":"Home","title":"R","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia_library(\"CoexistenceHoles\")\n\nopt <- julia_pkg_import(\"CoexistenceHoles\", func_list = c(\"random_communitymatrix\",\n                                                           \"random_growthvector\",\n                                                           \"assembly_hypergraph_GLV\",\n                                                           \"dissassembly_hypergraph\",\n                                                           \"save_hypergraph_dat\"))\nN = 8 # number of species in our ecosystem\n\n# create a random community matrix\nsA = 0.1 # standard deviation for community matrix\nC = 0.1 # success rate of Bernoulli distribution used to populate matrix\nA = opt$random_communitymatrix(N, sA, C)\n\n# create a random growth vector\nmr = 0.1\nsr = 0.1\nr = opt$random_growthvector(N, mr, sr)\n\n# create assembly and disassembly hypergraph\nreg = 0\nH = opt$assembly_hypergraph_GLV(A,R; method=\"localstability\", regularization=reg)\nM = opt$disassembly_hypergraph(H)\n\n# save these for later if you want\nsave_hypergraph_dat(\"~/hypergraphs/assembly_hypergraph.dat\", H)\nsave_hypergraph_dat(\"~/hypergraphs/disassembly_hypergraph.dat\", R)\n\n# get the betti numbers\nbetti_H = betti_hypergraph_ripscomplex(H; max_dim = max_dim)","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use CoexistenceHoles for academic research, please cite the following paper.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Paper Citation","category":"page"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Marco Tulio\nAaron Kelley","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Coming Soon!! For now just see the example on the main page","category":"page"}]
}
