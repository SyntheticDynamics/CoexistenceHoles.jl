var documenterSearchIndex = {"docs":
[{"location":"","page":"home","title":"home","text":"Modules = [CoexistHypergraph]","category":"page"},{"location":"#CoexistHypergraph.assembly_hypergraph_GLV-Tuple{Array{#s18,2} where #s18<:Real,Array{#s16,1} where #s16<:Real}","page":"home","title":"CoexistHypergraph.assembly_hypergraph_GLV","text":"Computes the assembly hypergraph for (A,r). Methods: \"permanence\", \"localstability\"\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.betti_hypergraph_ripscomplex-Tuple{Any}","page":"home","title":"CoexistHypergraph.betti_hypergraph_ripscomplex","text":"Computes Betti numbers of hypergraph. Based on computing the hypergraph subdivision without expansion, which returns the inclusion graph\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.is_GLVlocallystable-Tuple{Array{#s14,2} where #s14<:Real,Array{#s15,1} where #s15<:Real}","page":"home","title":"CoexistHypergraph.is_GLVlocallystable","text":"is_GLVlocallystable(A, r)\n\nComputes if the pair (A,r) has a feasible interior equilibrium that is stable.\n\nArguments\n\nA::Array{Real,2}: community matrix\nr::Array{Real, 1}: growth vector\n\nOutputs\n\nstability::Bool: true = stable, false = not stable\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.is_GLVpermanent-Tuple{Array{#s21,2} where #s21<:Real,Array{#s22,1} where #s22<:Real}","page":"home","title":"CoexistHypergraph.is_GLVpermanent","text":"is_GLVpermanent(A, r; <keyword arguments>)\n\nComputes permanence of the pair (A,r) using Jansen's criterion of mutual invasibility. is_permanente(A,r;) -> Boolean\n\nArguments\n\nA::Array{<:Real,2}: community matrix\nr::Array{<:Real, 1}: growth vector\nregularization::Real=0:\nz_tolerance::Real=-1e-60:\niterations::Integer=1e4:\n\nOutputs\n\npermanence::Bool: true = permanent, false = not permanent\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.minimal_simplicial_complex-Tuple{Any}","page":"home","title":"CoexistHypergraph.minimal_simplicial_complex","text":"Computes the minimal simplicial complex containig the hypergraph H\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.missing_edges-Tuple{Any}","page":"home","title":"CoexistHypergraph.missing_edges","text":"Computes missing edges of hypergraph H\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.random_communitymatrix-Tuple{Real,Real,Real}","page":"home","title":"CoexistHypergraph.random_communitymatrix","text":"random_communitymatrix(N, σ, p)\n\nGenerates a random community matrix (the \"A\" matrix in the generalized Lotka-Voltera equation https://en.wikipedia.org/wiki/Generalized_Lotka%E2%80%93Volterra_equation). The returned matrix will have -1's on the diagonals and be populated in the other entries according to a Bernoulli distribution with success rate parameter, p (the entries that are not \"populated\" are set to 0)\n\nArguments\n\nN::Real: dimension of returned square matrix (N x N)\nσ::Real: standard deviation of normal distribution used to generate each entry (μ = 0)\np::Real: success rate of Bernoulli distribution used to populate the returned matrix\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ncommunity_matrix::Array{<:Real,2}\n\nSee also: randomize_communitymatrix\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.random_growthvector-Tuple{Any,Any,Any}","page":"home","title":"CoexistHypergraph.random_growthvector","text":"random_growthvector(N, μ, σ; seed=nothing)\n\nGenerates a random growth vector (the \"r\" vector in the generalized Lotka-Voltera equation https://en.wikipedia.org/wiki/Generalized_Lotka%E2%80%93Volterra_equation)\n\nArguments\n\nN::Real: length of returned growth vector\nμ::Real: mean of LogNormal distribution used to generate each value\nσ::Real: standard deviation of LogNormal distribution used to generate each value\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ngrowth_vector::Array{<:Real,1}\n\nSee also: randomize_growthvector\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.randomize_communitymatrix-Tuple{Array{#s14,2} where #s14<:Real}","page":"home","title":"CoexistHypergraph.randomize_communitymatrix","text":"randomize_communitymatrix(A; <keyword arguments>)\n\nArguments\n\nr::Array{<:Real,2}: growth vector (this can be generated randomly by random_growthvector)\nmethod::String=\"shuffle\": will return a randomized community matrix using one of the following methods\n\"shuffle\": shuffles all of the entries except for the ones on the diagonals\n\"preserve_sign_shuffle\": same as \"shuffle\" but the signs are not modified\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ncommunity_matrix::Array{<:Real,2}\n\nSee also: random_communitymatrix\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.randomize_growthvector-Tuple{Array{#s19,1} where #s19<:Real}","page":"home","title":"CoexistHypergraph.randomize_growthvector","text":"randomize_growthvector(r; <keyword arguments>)\n\nArguments\n\nr::Array{<:Real,1}: growth vector (this can be generated randomly by random_growthvector)\nmethod::String=\"preserve_norm\": will return a randomized growthvector using one of the following methods\n\"preserve_norm\": generated using a normal distribution for each entry, and then scaled to have the same norm as growth vector input (r)\n\"shuffle\": randomly permute growth vector input (r)\n\"sample\": randomly sample (with replacement) entries of growth vector input (r)\n\"preserve_sign_shuffle\": same as \"shuffle\" but the signs are not modified\n\"preserve_sign_sample\": same as \"sample\" but the signs are not modified\nseed::Union{Nothing, <:Int}=nothing: if specified, this seed will be used in the random number generator, allowing reproducibility\n\nOutput\n\ngrowth_vector::Array{<:Real,1}\n\nSee also: random_growthvector\n\n\n\n\n\n","category":"method"},{"location":"#CoexistHypergraph.save_hypergraph_dat-Tuple{Any,Any}","page":"home","title":"CoexistHypergraph.save_hypergraph_dat","text":"Saves the hypergraph H into file as a list of hyperedges\n\n\n\n\n\n","category":"method"}]
}
